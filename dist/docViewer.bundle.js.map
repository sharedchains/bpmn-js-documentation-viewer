{"version":3,"file":"docViewer.bundle.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3ER,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,4BCAlF,MAAM,EAA+BI,OAAe,O,aCIrC,SAASC,EAAUC,EAAUC,GAE1C,MACMC,EAAY,IAAE,gJAEpB,IAAIC,EA8FJ,SAASC,EAAkBC,GACzB,IAAIC,EAAKD,EAAQE,gBAAkBF,EACnC,OAAIC,GAAiC,mBAAnBA,EAAGE,aAA+BF,EAAGE,YAAY,oBAC1DH,EAAQI,aAAa,GAErBH,EAAGI,QAAUN,EAAkBE,EAAGI,cAAWC,EAPxDX,EAASY,GAAG,iBA1FQC,IAGlB,IAAIR,EAAUQ,EAAMR,SAEhBA,EAAQS,aACTT,EAAQE,eAAeC,YAAY,kBAItCO,YAAW,IAGb,SAAyBV,GACvB,IAAIW,EAAW,IAnBG,sDAqBdC,EAAgBZ,EAAQE,eAAeW,OAAO,wCAA0Cb,EAAQE,eAAeY,sBAE/GF,GAAiBA,EAAcG,OAAS,GAC1CJ,EAASK,SAAS,QAGhBlB,IACFF,EAAST,IAAI,CACX8B,KAAM,cACLC,SAAQC,IACTA,EAAMC,KAAKC,IAAI,YAEjBzB,EAAS0B,OAAOxB,GAEbL,QAAQ8B,YAAYC,OAEU,mBAAhB,OAAU,OACrB,IAAE,YAAYT,QAEhBU,SAASC,eAAe,WAAWJ,SAGvCxB,OAAeQ,GAIjBR,EAAeF,EAAS+B,IAAI3B,EAAS,YAAa,CAChD4B,SAAU,CACRC,OAAQ,EACRC,MAAO,GAETV,KAAMT,IAGRA,EAASJ,GAAG,SAAUC,IAEpB,GAAGf,QAAQ8B,YAAYC,MAEDlB,MAAjBM,GACDjB,EAASoC,KAAK,UAAW,CACvB/B,QAASA,EACTgC,IAAKpB,SAIL,GAA2B,mBAAhB,OAAU,MAEzBa,SAASQ,KAAKC,YCxEP,SAAiBF,GAE5B,IAAIG,EAAWV,SAASW,cAAc,OACtCD,EAASE,UAAUV,IAAI,SACvBQ,EAASE,UAAUV,IAAI,QACvBQ,EAASG,aAAa,KAAM,WAC5BH,EAASG,aAAa,OAAQ,UAC9B,IAAIC,EAAS,0PAKkBP,EALlB,qBASb,OADAG,EAASK,UAAYD,EACdJ,EDwDuBM,CAAQ7B,IAClC,IAAE,YAAY8B,aAId,GAAI9B,GAAiBA,EAAcG,OAAS,EAAG,CAC7C,IAAI4B,EAAiB5C,EAAkBC,GACnC0C,EAAQ,IAAE7C,GACd6C,EAAME,KAAK,sBAAsBC,QACjCH,EAAME,KAAK,sBAAsBE,OAAOlC,GAExC,IAAImC,EAAenD,EAAS+B,IAAIgB,EAAeK,GAAI,CACjDpB,SAAU,CACRqB,IAAK,EACLC,KAAM,GAER9B,KAAMsB,IAERA,EAAME,KAAK,cAAcrC,GAAG,SAAS,KACnCX,EAAS0B,OAAOyB,MAItB,OAAO,KA5EQI,CAAgBnD,IAAU,MErBVP,OAAkB,UFkHvDC,EAAU0D,QAAU,CAAC,WAAY,Y","sources":["webpack://DocViewer/webpack/bootstrap","webpack://DocViewer/webpack/runtime/compat get default export","webpack://DocViewer/webpack/runtime/define property getters","webpack://DocViewer/webpack/runtime/hasOwnProperty shorthand","webpack://DocViewer/external window \"jQuery\"","webpack://DocViewer/./lib/docViewer.js","webpack://DocViewer/./lib/modal/BootstrapModal.js","webpack://DocViewer/external window \"bootstrap\""],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"jQuery\"];","import $ from 'jquery';\r\n//import 'bootstrap';\r\nimport bsModal from './modal/BootstrapModal';\r\n\r\nexport default function DocViewer(eventBus, overlays) {\r\n\r\n  const overlayHtml = '<div class=\"doc-overlay doc-overlay-border\"></div>';\r\n  const modalHtml = $('<div class=\"doc-modal\"><div class=\"doc-modal-content\"></div><div class=\"doc-modal-footer\"><button id=\"doc-close\" >Close</button></div></div>');\r\n\r\n  let badgeOverlay;\r\n\r\n  let onHoverEvent = (event) => {\r\n\r\n    // For each shape check check documentation to create the box\r\n    let element = event.element;\r\n\r\n    if (element.labelTarget ||\r\n      !element.businessObject.$instanceOf('bpmn:FlowNode')) {\r\n      return;\r\n    }\r\n\r\n    setTimeout(() => createDocButton(element), 0);\r\n  };\r\n\r\n  function createDocButton(element) {\r\n    let $overlay = $(overlayHtml);\r\n\r\n    let documentation = element.businessObject.$attrs['documentation:extendedDocumentation'] || element.businessObject.extendedDocumentation;\r\n    //console.log(documentation);\r\n    if (documentation && documentation.length > 0) {\r\n      $overlay.addClass('full');\r\n    }\r\n\r\n    if (badgeOverlay) {\r\n      overlays.get({\r\n        type: 'doc-badge'\r\n      }).forEach(badge => {\r\n        badge.html.off('click');\r\n      });\r\n      overlays.remove(badgeOverlay);\r\n      //with react remove in another way\r\n      if(window?.components?.Modal){\r\n        //exist so continue :)\r\n      }else if(typeof ($.fn.modal) === 'function'){\r\n        if ($('#myModal').length){\r\n          /* it exists */\r\n          document.getElementById(\"myModal\").remove();\r\n        } \r\n      }\r\n      badgeOverlay = undefined;\r\n    }\r\n\r\n    // attach an overlay to a node\r\n    badgeOverlay = overlays.add(element, 'doc-badge', {\r\n      position: {\r\n        bottom: 0,\r\n        right: 0\r\n      },\r\n      html: $overlay\r\n    });\r\n\r\n    $overlay.on('click', (event) => {\r\n      // append a modal in the DOM\r\n      if(window?.components?.Modal){\r\n        //react modal, open it\r\n        if(documentation != undefined){\r\n          eventBus.fire(\"docshow\", {\r\n            element: element,\r\n            doc: documentation\r\n          });\r\n        }\r\n        \r\n      }else if(typeof ($.fn.modal) === 'function'){\r\n        //bootstrap modal, open it\r\n        document.body.appendChild(bsModal(documentation));\r\n        $(\"#myModal\").modal();\r\n      }else {\r\n        // NO BOOTSTRAP & NO REACT\r\n        // Show a popup showing the content of bpmn:documentation\r\n        if (documentation && documentation.length > 0) {\r\n          let processElement = getProcessElement(element);\r\n          let modal = $(modalHtml);\r\n          modal.find('.doc-modal-content').empty();\r\n          modal.find('.doc-modal-content').append(documentation);\r\n\r\n          let modalOverlay = overlays.add(processElement.id, {\r\n            position: {\r\n              top: 0,\r\n              left: 0\r\n            },\r\n            html: modal\r\n          });\r\n          modal.find('#doc-close').on('click', () => {\r\n            overlays.remove(modalOverlay);\r\n          });\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n\r\n  eventBus.on('element.hover', onHoverEvent);\r\n\r\n  function getProcessElement(element) {\r\n    let bo = element.businessObject || element;\r\n    if (bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf('bpmn:Definitions')) {\r\n      return element.rootElements[0];\r\n    } else {\r\n      return bo.$parent ? getProcessElement(bo.$parent) : undefined;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nDocViewer.$inject = ['eventBus', 'overlays'];","import 'bootstrap';\r\n\r\nexport default function bsModal(doc) {\r\n    //empty modal appended to body - BOOTSTRAP VERSION\r\n    let newmodal = document.createElement(\"div\");\r\n    newmodal.classList.add(\"modal\");\r\n    newmodal.classList.add(\"fade\");\r\n    newmodal.setAttribute(\"id\", \"myModal\");\r\n    newmodal.setAttribute(\"role\", \"dialog\");\r\n    let bModal = '<div class=\"modal-dialog modal-fullscreen\" id=\"modalDoc\" style=\"width: 95%; margin: auto;\">' +\r\n        '<div class=\"modal-content\">' +\r\n        '<div class=\"modal-header\">' +\r\n        '<button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>' +\r\n        '</div>' +\r\n        '<div class=\"modal-body\">'+doc+'</div>' +\r\n        '</div>' +\r\n        '</div>';\r\n    newmodal.innerHTML = bModal;\r\n    return newmodal;\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"bootstrap\"];"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","window","DocViewer","eventBus","overlays","modalHtml","badgeOverlay","getProcessElement","element","bo","businessObject","$instanceOf","rootElements","$parent","undefined","on","event","labelTarget","setTimeout","$overlay","documentation","$attrs","extendedDocumentation","length","addClass","type","forEach","badge","html","off","remove","components","Modal","document","getElementById","add","position","bottom","right","fire","doc","body","appendChild","newmodal","createElement","classList","setAttribute","bModal","innerHTML","bsModal","modal","processElement","find","empty","append","modalOverlay","id","top","left","createDocButton","$inject"],"sourceRoot":""}